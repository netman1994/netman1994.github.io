<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>netman1994</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-13T14:18:35.479Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>netman1994</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://example.com/2024/07/05/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2024/07/05/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2024-07-04T16:09:09.000Z</published>
    <updated>2024-09-13T14:18:35.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h2><p>在分布式系统中，确保多个进程或线程之间互斥访问共享资源的机制。在多台服务器或多进程环境下，通常会遇到多个实例对同一个资源进行操作的竞争问题，分布式锁可以保证同一时刻只有一个实例能够操作资源，避免数据不一致或竞争条件。</p><h2 id="分布式锁的使用场景"><a href="#分布式锁的使用场景" class="headerlink" title="分布式锁的使用场景"></a>分布式锁的使用场景</h2><ol><li>   库存扣减：当多个用户同时抢购商品时，确保同一时刻只有一个进程能成功扣减库存。</li><li>   秒杀、抢购活动：在高并发场景下，保证只有一个用户可以抢到某个限量商品。</li><li>   定时任务调度：当多个实例运行定时任务时，通过分布式锁来确保任务不会被重复执行。</li><li>   分布式事务：当多个服务对同一资源进行操作时，利用分布式锁来保证事务的一致性。</li><li>   防重提交：例如表单提交等操作，需要通过分布式锁来防止用户重复提交。</li></ol><h2 id="分布式锁的实现方式"><a href="#分布式锁的实现方式" class="headerlink" title="分布式锁的实现方式"></a>分布式锁的实现方式</h2><h3 id="基于数据库的分布式锁"><a href="#基于数据库的分布式锁" class="headerlink" title="基于数据库的分布式锁"></a>基于数据库的分布式锁</h3><p>通过数据库表中的行记录来实现锁，常用的方式是利用数据库的INSERT或UPDATE操作。</p><ul><li>优点：实现简单，无需引入外部组件。</li><li>缺点：数据库性能可能成为瓶颈。</li></ul><p>基于数据库实现分布式锁的常见方式是利用数据库中的行记录作为锁标识。通过事务和SQL操作（如INSERT或UPDATE）来获取或释放锁。</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>一：创建数据库表作为锁资源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `distributed_lock` (</span><br><span class="line">  `lock_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `lock_owner` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `lock_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`lock_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure><p>二：获取锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> distributed_lock (lock_name, lock_owner, lock_time)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;lock_name&#x27;</span>, <span class="string">&#x27;owner_id&#x27;</span>, <span class="built_in">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></table></figure><p>如果插入失败（即锁已经存在），则说明锁已经被其他线程持有。<br>三：释放锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> distributed_lock</span><br><span class="line"><span class="keyword">WHERE</span> lock_name <span class="operator">=</span> <span class="string">&#x27;lock_name&#x27;</span> <span class="keyword">AND</span> lock_owner <span class="operator">=</span> <span class="string">&#x27;owner_id&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用lock_name来确保只有锁的持有者能够释放锁。</p><p>四：超时机制<br>为了防止死锁，可以引入超时机制，如记录锁的创建时间，并在锁超时后允许其他线程获取锁。可以通过定期检查锁的时间字段并自动删除过期的锁来实现。<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> distributed_lock</span><br><span class="line"><span class="keyword">WHERE</span> lock_name <span class="operator">=</span> <span class="string">&#x27;lock_name&#x27;</span> <span class="keyword">AND</span> lock_time <span class="operator">&lt;</span> (<span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="string">&#x27;30&#x27;</span> <span class="keyword">SECOND</span>);</span><br></pre></td></tr></table></figure></p><h3 id="基于Redis的分布式锁"><a href="#基于Redis的分布式锁" class="headerlink" title="基于Redis的分布式锁"></a>基于Redis的分布式锁</h3><p>使用缓存工具（如Redis）的SETNX命令（Set if Not Exists）和过期时间TTL来实现。</p><ul><li>优点：Redis性能高，延迟低，支持TTL防止死锁。</li><li>缺点：需要考虑Redis主从复制时的数据一致性问题。</li></ul><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>一：获取锁<br>通过SETNX（set if not exixts）命令来实现获取锁的逻辑，如果键不存在（即锁未被占用）SETNX会设置键并返回成功。否则返回失败，表示锁已经被其他线程占用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set lock_key unique_value NX PX 10000</span><br></pre></td></tr></table></figure><ul><li>lock_key 锁的名字，表示这把锁的唯一标识</li><li>unique_key 唯一标识，确保客户端释放锁时不会误删别的客户端的锁</li><li>NX 表示只有当键不存在时才进行设置，防止锁被其他客户端持有</li><li>PX 10000：设置锁的自动过期时间（单位为毫秒）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>二：设置锁的过期时间<br>通过EXPIRE或在SET命令中直接指定过期时间来避免死锁。当锁的持有者出现故障或没有正常释放锁时，锁会自动过期，保证不会长时间占用。</p><p>三： 释放锁<br>锁的持有者完成任务后，需要主动释放锁。这个操作通过DEL命令来删除锁对应的Redis键。<br>只有当当前客户端仍然持有锁时才能释放锁。可以通过Lua脚本确保删除锁的操作是原子性的（即读取锁的值和删除锁必须在同一个原子操作中完成）。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;GET&quot;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;DEL&quot;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>KEYS[1]：锁的键名</li><li>ARGV[1]：客户端的唯一标识</li><li>如果当前客户端持有的锁和Redis中的锁值一样，则删除该锁</li></ul><p>四：防止误删锁<br>在分布式环境中，可能会出现锁被误删的情况（比如：持有锁的客户端任务超时而锁过期，之后某个新任务获得了锁，但之前的任务仍然认为自己持有锁并执行了DEL）。为防止这种情况，需要确保只有当前持有锁的客户端才能释放锁，可以通过对锁的唯一标识进行验证。</p><p>五：自动续期<br>如果业务执行时间可能会超过锁的过期时间，可以实现自动续期机制。在持有锁的客户端每隔一段时间（例如一半的过期时间）检查锁是否仍然持有，如果是。则延长锁的过期时间</p><h3 id="基于Redission的分布式锁"><a href="#基于Redission的分布式锁" class="headerlink" title="基于Redission的分布式锁"></a>基于Redission的分布式锁</h3><h3 id="基于zookeeper的分布式锁"><a href="#基于zookeeper的分布式锁" class="headerlink" title="基于zookeeper的分布式锁"></a>基于zookeeper的分布式锁</h3><p>Zookeeper是一个分布式协调服务，利用其顺序临时节点特性，可以实现分布式锁。</p><ul><li>Zookeeper具有强一致性，可靠性高，适用于分布式事务。</li><li>缺点：实现相对复杂，性能相对Redis较低。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是分布式锁&quot;&gt;&lt;a href=&quot;#什么是分布式锁&quot; class=&quot;headerlink&quot; title=&quot;什么是分布式锁&quot;&gt;&lt;/a&gt;什么是分布式锁&lt;/h2&gt;&lt;p&gt;在分布式系统中，确保多个进程或线程之间互斥访问共享资源的机制。在多台服务器或多进程环境下，通常会遇到</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo使用指南</title>
    <link href="http://example.com/2024/07/04/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://example.com/2024/07/04/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2024-07-04T15:21:36.000Z</published>
    <updated>2024-09-13T14:18:40.399Z</updated>
    
    <content type="html"><![CDATA[<h4 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h4><p><code>hexo g</code>错误，can not foud hexo-util<br>解决办法：<code>cnpm install hexo-util --save</code></p><h4 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h4><p>访问<code>http://localhost:4000</code>显示如下<code>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</code><br>解决办法：<code>cnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p><h4 id="坑三"><a href="#坑三" class="headerlink" title="坑三"></a>坑三</h4><p><code>hexo d</code>错误，ERROR Deployer not found: git<br>解决办法：<code>cnpm install hexo-deployer-git --save</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;坑一&quot;&gt;&lt;a href=&quot;#坑一&quot; class=&quot;headerlink&quot; title=&quot;坑一&quot;&gt;&lt;/a&gt;坑一&lt;/h4&gt;&lt;p&gt;&lt;code&gt;hexo g&lt;/code&gt;错误，can not foud hexo-util&lt;br&gt;解决办法：&lt;code&gt;cnpm instal</summary>
      
    
    
    
    
  </entry>
  
</feed>
